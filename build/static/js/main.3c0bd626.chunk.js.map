{"version":3,"sources":["components/Button.tsx","utils/utils.tsx","constants/states.ts","constants/translationTypes.ts","constants/keycodes.ts","components/ChipsInput/ChipsInput.tsx","components/SelectionList/SelectionList.tsx","components/WordList/WordsExport.tsx","pages/SentenceFinder.tsx","components/ErrorBoundary.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ButtonWidth","ButtonSize","isNilOrEmpty","either","isNil","isEmpty","isNotNilOrEmpty","arg","window","location","host","includes","BuilderState","LanguageCodes","Button","onClick","children","size","NORMAL","className","classNames","ChipsInput","items","setItems","useState","focusedChip","setFocusedChip","inputValue","setInputValue","isDeleteMode","setIsDeleteMode","setDeleteModeOrDelete","lastChipIndex","lastItem","Array","from","pop","newChipsSet","Set","delete","chipComponents","map","text","i","key","isFocused","handleClick","handleDelete","Chip","style","backgroundColor","pink","undefined","onDelete","label","chipRenderer","handleDeleteChip","TextField","id","multiline","margin","value","fullWidth","onChange","event","element","target","regex","containsSeparator","test","console","log","newItems","trim","split","forEach","item","add","placeholder","onKeyDown","keyCode","keycodes","SelectionListItem","SelectionList","options","defaultText","initialValue","setValue","e","disabled","WordsExport","vocabItems","sourceLang","translationLang","sentencesMap","Map","keys","set","sentenceIndices","setSenctenceIndices","ref","useRef","icon","faSyncAlt","data","filter","word","get","sentenceObject","sentences","sentenceTranslation","translations","sentence","original","csv","Papa","unparse","csvData","Blob","type","url","URL","createObjectURL","a","current","href","click","SMALL","entries","vocabItem","orignialSentence","translation","currentIndex","nextIndex","Math","max","length","updatedSentenceIndices","cycleSentence","download","display","getWords","words","languageFrom","languageTo","onUpdate","fetch","result","json","vocab_item","defaultItems","languageOptions","FR","SP","JA","EN","languageOptionsArray","Object","Builder","vocabMap","setVocabMap","socket","nativeLanguage","setNativeLanguage","targetLanguage","setTargetLanguage","INPUTTING","builderState","setBuilderState","validItems","handleSubmit","uniq","preventDefault","vi","prevMap","newVocabMap","emit","PREPARING","useEffect","isInputting","isPreparing","isFailed","FAILED","EMAIL_SUBJECT","encodeURI","ErrorBoundary","props","state","hasError","error","errorInfo","this","rel","erro","React","Component","ReactGA","initialize","pageview","pathname","search","App","data-testid","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c0bd626.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport './Button.scss';\n\nexport enum ButtonWidth {\n  NARROW = 'narrow',\n  NORMAL = 'normal',\n  WIDE = 'wide',\n  FULL = 'full'\n}\n\nexport enum ButtonSize {\n  SMALL = 'small',\n  NORMAL = 'normal',\n  LARGE = 'large'\n}\n\ntype PropTypes = {\n  onClick: (event: any) => void;\n  children: React.ReactNode;\n  size?: ButtonSize;\n};\n\nconst BASE_CLASS = 'button';\n\nconst Button: React.SFC<PropTypes> = ({\n  onClick,\n  children,\n  size = ButtonSize.NORMAL\n}) => {\n  const className = classNames(BASE_CLASS, {\n    [`${BASE_CLASS}--size-${size}`]: true\n  });\n\n  return (\n    <div className={className} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default Button;\n","import { isNil, isEmpty, either } from 'ramda';\nimport React, { ReactElement, Fragment } from 'react';\n\nexport const isNilOrEmpty = either(isNil, isEmpty);\n\nexport const isNotNilOrEmpty = (arg: any) => !isNilOrEmpty(arg);\n\nexport const wait = async (delay: number) => {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, delay);\n  });\n};\n\nexport const encodeQueryString = (params: any) => {\n  const keys: string[] = Object.keys(params);\n\n  if (!isNilOrEmpty(keys)) {\n    var esc = encodeURIComponent;\n    const paramsString = Object.keys(params)\n      .map((k) => esc(k) + '=' + esc(params[k]))\n      .join('&');\n    return `?${paramsString}`;\n  }\n\n  return '';\n};\n\nexport const parseQueryString = (s: any): any =>\n  s\n    .slice(1)\n    .split('&')\n    .map((queryParam: string) => {\n      let pair = queryParam.split('=');\n      return { key: pair[0], value: pair[1] };\n    })\n    .reduce((query: any, pair: any) => {\n      pair.key && (query[pair.key] = pair.value);\n\n      return query;\n    }, {});\n\nexport const isDev = window.location.host.includes('localhost');\n\nexport const getRandomIndex = (length: number) =>\n  Math.floor(Math.random() * length);\n\nexport const getRandomItem = (arr: Array<any>) =>\n  arr[getRandomIndex(arr.length)];\n\nexport const formatScore = (score: number) =>\n  String(score).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\nexport const shuffle = (a: Array<any>): Array<any> => {\n  const shuffled = [...a];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n\n  return shuffled;\n};\n\nexport const pluralize = (\n  count: number,\n  singular: string,\n  plural: string\n): string => (count === 1 ? singular : plural);\n\nexport const replaceWordWithText = (\n  word: string,\n  text: string\n): ReactElement | string => {\n  console.log('word', word);\n  console.log('text', text);\n\n  const regex = new RegExp(`${word}([a-zA-Z]*)`, 'gmi');\n  return text.replace(regex, '____');\n};\n\nexport const replaceWordWithElement = (\n  word: string,\n  text: string\n): ReactElement => {\n  const regex = new RegExp(`${word}([a-zA-Z]*)`, 'gmi');\n  const segments = text\n    .split(regex)\n    .filter(isNotNilOrEmpty)\n    .map((word, i) => <span key={`word-${i}`}>{word}</span>);\n  console.log('segments', segments);\n\n  const elements = segments.reduce(\n    (acc: ReactElement[], segment: ReactElement, i) => {\n      const clozeElement = (\n        <span className=\"cloze\" key={i}>\n          [---]\n        </span>\n      );\n\n      console.log('acc', acc);\n      console.log('segment', segment.props.children);\n\n      if (i === 0) {\n        return [...acc, segment];\n      }\n\n      return [...acc, clozeElement, segment];\n    },\n    []\n  );\n\n  return <span>{elements}</span>;\n};\n","// type BuilderStates = 'inputting' | 'building' | 'ready';\n\n// export const BuilderStates states = }\n\nexport enum BuilderState {\n  INPUTTING,\n  PREPARING,\n  READY,\n  FAILED\n}\n","export enum LanguageCodes {\n  FR = 'fra',\n  SP = 'spa',\n  JA = 'jpn',\n  EN = 'eng',\n}\n\nexport type SentenceExampleType = {\n  original: string;\n  translations: string[];\n};\n\nexport type VocabItemType = {\n  word: string;\n  sentences: SentenceExampleType[];\n};\n\n/*\n  word: '意地悪',\n  translations: ['ill-tempered', 'unkind', 'malicious'],\n  examples: [\n    {\n      targetLanguage: {\n        sentence:\n          '分離不安の子犬は、行儀が悪いわけでも、飼い主に意地悪をしているわけでもありません。',\n        sourceUrl:\n          'http://www.eukanuba.jp/ja-JP/puppy-guide/easing-your-puppys-separation-anxiety.jspx',\n        sourceName: 'eukanuba.jp',\n      },\n      translation: {\n        sentence:\n          'Pups who suffer from separation anxiety are not misbehaving or being spiteful.',\n        sourceUrl:\n          'http://www.eukanuba.cz/en-US/puppy-guide/easing-your-puppys-separation-anxiety.jspx',\n        sourceName: 'eukanuba.cz',\n      },\n    },\n  ],\n\n\n*/\n","export default {\n  BACKSPACE: 8,\n  SPACE: 9,\n  TAB: 13,\n  COMMA: 32,\n  ENTER: 188,\n};\n","import React, { useState, ChangeEvent } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport { Chip } from '@material-ui/core';\nimport pink from '@material-ui/core/colors/pink';\nimport { isNotNilOrEmpty } from '../../utils/utils';\nimport { isEmpty, isNil } from 'ramda';\nimport keycodes from '../../constants/keycodes';\n\nimport './ChipsInput.scss';\n\nconst BASE_CLASS = 'chips-input';\n\ntype ChipsRendererPropsType = {\n  text: string;\n  isFocused: boolean;\n  handleClick: () => void;\n  handleDelete: () => void;\n  className?: string;\n};\n\nconst chipRenderer = (\n  {\n    text,\n    isFocused,\n    handleClick,\n    handleDelete,\n    className,\n  }: ChipsRendererPropsType,\n  key: number\n) => (\n  <Chip\n    key={key}\n    className={`${BASE_CLASS}__chips__chip`}\n    style={{\n      backgroundColor: isFocused ? pink[300] : undefined,\n    }}\n    onClick={handleClick}\n    onDelete={handleDelete}\n    label={text}\n  />\n);\n\ntype ChipInputPropsType = {\n  items: Set<string>;\n  setItems: (items: Set<string>) => void;\n};\n\nconst ChipsInput: React.SFC<ChipInputPropsType> = ({ items, setItems }) => {\n  const [focusedChip, setFocusedChip] = useState<number>(3);\n  const [inputValue, setInputValue] = useState<string>('');\n  const [isDeleteMode, setIsDeleteMode] = useState<boolean>(false);\n\n  const handleDeleteChip = (text: string, i: number) => {\n    const newChipsSet = new Set(items);\n    newChipsSet.delete(text);\n    setItems(newChipsSet);\n  };\n\n  const setDeleteModeOrDelete = () => {\n    if (!isDeleteMode) {\n      const lastChipIndex = items.size - 1;\n      setIsDeleteMode(true);\n      setFocusedChip(lastChipIndex);\n      return;\n    }\n\n    const lastItem = Array.from(items).pop();\n    if (!isNil(lastItem)) {\n      const newChipsSet = new Set(items);\n      newChipsSet.delete(lastItem);\n      setItems(newChipsSet);\n    }\n\n    setInputValue('');\n    setIsDeleteMode(false);\n  };\n\n  const handleChange = (\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    const element = event.target as HTMLInputElement;\n    const { value } = element;\n    const regex = /; |;|, |,|\\n/;\n    const containsSeparator = regex.test(value);\n\n    if (isEmpty(value)) {\n      setDeleteModeOrDelete();\n      return;\n    }\n\n    if (containsSeparator) {\n      console.log('contains', value);\n      const newItems = value.trim().split(regex);\n      const newChipsSet = new Set(items);\n      newItems.forEach((item) => {\n        if (isNotNilOrEmpty(item)) {\n          newChipsSet.add(item);\n        }\n      });\n\n      setItems(newChipsSet);\n      setInputValue('');\n\n      return;\n    }\n\n    setInputValue(element.value);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (isEmpty(inputValue) && event.keyCode === keycodes.BACKSPACE) {\n      setDeleteModeOrDelete();\n    }\n  };\n\n  const chipComponents = Array.from(items).map((text, i) => {\n    return chipRenderer(\n      {\n        text,\n        isFocused: focusedChip === i && isDeleteMode,\n        handleClick: () => setFocusedChip(i),\n        handleDelete: () => handleDeleteChip(text, i),\n        className: 'text',\n      },\n      i\n    );\n  });\n\n  return (\n    <div className={BASE_CLASS}>\n      <div className={`${BASE_CLASS}__chips`}>{chipComponents}</div>\n      <TextField\n        id=\"standard-textarea\"\n        multiline\n        className=\"{classes.textField}\"\n        margin=\"normal\"\n        value={inputValue}\n        fullWidth\n        onChange={handleChange}\n        placeholder=\"Enter words here, separated by new lines or commas, then press enter\"\n        onKeyDown={handleKeyDown}\n      />\n    </div>\n  );\n};\n\nexport default ChipsInput;\n","import React, { useState, ReactElement } from 'react';\n\nimport './SelectionList.scss';\nimport { isNilOrEmpty } from '../../utils/utils';\n\nexport type SelectionOptionValueType = string | number;\n\nconst SelectionListItem: React.SFC<SelecitonlistOptionType> = ({\n  key,\n  label,\n}): ReactElement => (\n  <option value={key} className=\"seleciton-list__item\" key={key}>\n    {label}\n  </option>\n);\n\nexport type SelecitonlistOptionType = {\n  key: SelectionOptionValueType;\n  label: string;\n};\n\ntype SelectionListPropsType = {\n  options: SelecitonlistOptionType[];\n  defaultText?: string;\n  onChange: (option: string) => void;\n  initialValue?: string;\n};\n\nconst SelectionList: React.SFC<SelectionListPropsType> = ({\n  options,\n  defaultText,\n  onChange,\n  initialValue,\n}): ReactElement => {\n  const [value, setValue] = useState<string>(initialValue || '');\n\n  const handleChange = (e: React.FormEvent) => {\n    const target = e.target as HTMLSelectElement;\n    const { value } = target;\n    setValue(target.value);\n    onChange(value);\n  };\n\n  return (\n    <select className=\"selection-list\" value={value} onChange={handleChange}>\n      {isNilOrEmpty(defaultText) && (\n        <option value=\"\" disabled>\n          {defaultText}\n        </option>\n      )}\n      {options.map(SelectionListItem)}\n    </select>\n  );\n};\n\nexport default SelectionList;\n","import React, { useState, useRef, ReactElement } from 'react';\nimport Papa from 'papaparse';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  replaceWordWithText,\n  isNotNilOrEmpty,\n  isNilOrEmpty,\n  replaceWordWithElement,\n} from '../../utils/utils';\nimport Button, { ButtonSize } from '../../components/Button';\n\nimport './WordsExport.scss';\nimport { LanguageCodes, VocabItemType } from '../../constants/translationTypes';\n\nconst BASE_CLASS = 'words-export';\n\ntype WordExportPropsType = {\n  vocabItems: Map<string, VocabItemType | null>;\n  sourceLang: LanguageCodes;\n  translationLang: LanguageCodes;\n};\n\nconst WordsExport: React.SFC<WordExportPropsType> = ({\n  vocabItems,\n  sourceLang,\n  translationLang,\n}): ReactElement => {\n  const [sentenceIndices, setSenctenceIndices] = useState<Map<string, number>>(\n    () => {\n      const sentencesMap = new Map();\n      [...vocabItems.keys()].forEach((key) => sentencesMap.set(key, 0));\n\n      return sentencesMap;\n    }\n  );\n\n  const ref = useRef<HTMLAnchorElement>(null);\n\n  const saveCSV = () => {\n    const data = [...vocabItems.keys()]\n      .filter((word) => isNotNilOrEmpty(vocabItems.get(word)))\n      .map((word) => {\n        const vocabItem = vocabItems.get(word);\n        const sentenceObject = vocabItem!.sentences[\n          sentenceIndices.get(word) as number\n        ];\n        // const sentence = replaceWordWithText(\n        //   word,\n        //   sentenceObject?.original!\n        // );\n        const sentenceTranslation = sentenceObject?.translations[0]\n        // # Todo, add dictionary definition\n        return {\n          word,\n          // definition,\n          sentence: sentenceObject.original,\n          sentenceTranslation,\n        };\n      });\n    var csv = Papa.unparse(data);\n    var csvData = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    var url = window.URL.createObjectURL(csvData);\n    const a = ref.current;\n    if (a?.href) {\n      a.href = url;\n      a.click();\n    }\n  };\n\n  const cycleSentence = (word: string) => {\n    const currentIndex = sentenceIndices.get(word) as number;\n    const vocabItem = vocabItems.get(word);\n\n    const maxIndex = Math.max(vocabItem?.sentences!.length - 1, 0);\n    const nextIndex = currentIndex === maxIndex ? 0 : currentIndex + 1;\n\n    const updatedSentenceIndices = new Map(sentenceIndices);\n    updatedSentenceIndices.set(word, nextIndex);\n\n    setSenctenceIndices(updatedSentenceIndices);\n  };\n\n  return (\n    <div className={`${BASE_CLASS}`}>\n      <div className={`${BASE_CLASS}__prompt`}>\n        <div>\n          <div className=\"text-bold\">Pick sentences and save them</div>\n          <div>\n            Click <FontAwesomeIcon icon={faSyncAlt} size=\"1x\" /> to change\n            sentences\n          </div>\n        </div>\n        <Button onClick={saveCSV} size={ButtonSize.SMALL}>Save CSV</Button>\n      </div>\n      <div className={`${BASE_CLASS}__vocab-items`}>\n        <div className={`${BASE_CLASS}__vocab-items__item`}>\n          <div className=\"border-right padding-5 flex\">\n            <b>Word</b>\n          </div>\n          <div className=\"border-right padding-5 flex\">\n            Sentence\n          </div>\n          <div className=\"border-right padding-5 flex\">\n            Translation\n          </div>\n          <div className=\"padding-5 flex fd-column jc-around\">\n            Change\n          </div>\n        </div>\n        {Array.from(vocabItems.entries()).map(([word, vocabItem], i) => {\n          const sentence =\n            vocabItem?.sentences?.[sentenceIndices.get(word) as number];\n\n          const orignialSentence = sentence?.original;\n          const translation = sentence?.translations[0];\n\n          return (\n            <div key={i} className={`${BASE_CLASS}__vocab-items__item`}>\n              <div className=\"border-right padding-5 flex\">{word}</div>\n              {isNilOrEmpty(vocabItem) && (\n                <div\n                  className={`${BASE_CLASS}__vocab-items__item__loading-indicator border-right padding-5 flex grid-column-3`}\n                >\n                  Loading...\n                </div>\n              )}\n\n              {isNotNilOrEmpty(vocabItem) && (\n                <>\n                  <div className=\"border-right padding-5 flex\">\n                    {orignialSentence}\n                  </div>\n                  <div className=\"border-right padding-5 flex\">\n                    {translation}\n                  </div>\n                  <div className=\"padding-5 flex fd-column jc-around\">\n                    <Button\n                      onClick={() => cycleSentence(word)}\n                      size={ButtonSize.SMALL}\n                    >\n                      <FontAwesomeIcon icon={faSyncAlt} size=\"1x\" />\n                    </Button>\n                  </div>\n                </>\n              )}\n            </div>\n          );\n        })}\n      </div>\n      <a href=\"null\" download=\"vocab.csv\" ref={ref} style={{ display: 'none' }}>\n        Download\n      </a>\n    </div>\n  );\n};\n\nexport default WordsExport;\n","import React, { useState, useEffect } from 'react';\nimport { uniq } from 'ramda';\nimport { isNotNilOrEmpty } from '../utils/utils';\nimport Button from '../components/Button';\nimport { BuilderState } from '../constants/states';\nimport { LanguageCodes, VocabItemType } from '../constants/translationTypes';\n\nimport './SentenceFinder.scss';\nimport ChipsInput from '../components/ChipsInput/ChipsInput';\nimport SelectionList from '../components/SelectionList/SelectionList';\nimport WordsExport from '../components/WordList/WordsExport';\n\ntype TranslationOptionsType = {\n  words: string[];\n  languageFrom: LanguageCodes;\n  languageTo: LanguageCodes;\n  onUpdate: (vi: VocabItemType) => void;\n};\n\nconst BASE_URL = 'https://sentence-finder-backend.herokuapp.com';\n\n\nconst getWords = async({ words, languageFrom, languageTo, onUpdate }: TranslationOptionsType) => {\n  words.forEach(async word => {\n    try {\n      const result = await fetch(`${BASE_URL}/search?word=${word}&language_from=${languageFrom}&language_to=${languageTo}`)\n      const json = await result.json();\n      const vocabItem: VocabItemType = json.vocab_item;\n      console.log('json', json)\n      console.log('vocabItem', vocabItem)\n      onUpdate(vocabItem)\n    } catch (error) {\n    }\n  });\n};\n\nconst defaultItems = new Set(['hielo', 'hormiga', 'reconocer']);\n\ntype CompletedSentencesPayload = {\n  url: string;\n};\n\nconst languageOptions: { [code in LanguageCodes]: string } = {\n  [LanguageCodes.FR]: 'French',\n  [LanguageCodes.SP]: 'Spanish',\n  [LanguageCodes.JA]: 'Japanese',\n  [LanguageCodes.EN]: 'English',\n};\n\nconst languageOptionsArray = Object.entries(\n  languageOptions\n).map(([key, label]) => ({ key, label }));\n\nconst Builder = () => {\n  const [items, setItems] = useState<Set<string>>(defaultItems);\n  const [vocabMap, setVocabMap] = useState<Map<string, VocabItemType | null>>(\n    new Map()\n  );\n  const [socket, setSocket] = useState<SocketIOClient.Socket | null>(null);\n  const [nativeLanguage, setNativeLanguage] = useState<LanguageCodes>(\n    LanguageCodes.EN\n  );\n  const [targetLanguage, setTargetLanguage] = useState<LanguageCodes>(\n    LanguageCodes.SP\n  );\n\n  const [builderState, setBuilderState] = useState<BuilderState>(\n    BuilderState.INPUTTING\n  );\n\n  const validItems = Array.from(items).filter(isNotNilOrEmpty);\n\n  const handleSubmit = async (event: any) => {\n    if (uniq(validItems).length === 0) return;\n\n    event.preventDefault();\n    // socket?.off('word-translated');\n    // socket?.on('translation-success', (vocabItem: VocabItemType) => {\n    //   console.log('received', vocabItem);\n    //   setVocabMap((prevMap) => {\n    //     const newVocabMap = new Map(prevMap);\n    //     newVocabMap.set(vocabItem.word, vocabItem);\n    //     return newVocabMap;\n    //   });\n    // });\n\n    const options: TranslationOptionsType = {\n      words: uniq(validItems),\n      languageFrom: targetLanguage,\n      languageTo: nativeLanguage,\n      onUpdate: (vi) => {\n      setVocabMap((prevMap) => {\n        const newVocabMap = new Map(prevMap);\n        newVocabMap.set(vi.word, vi);\n        return newVocabMap;\n      });\n      }\n    };\n\n    console.log('sending', options);\n    socket?.emit(`get-sentences`, options);\n\n    const newVocabMap = new Map();\n    validItems.forEach((item) => newVocabMap.set(item, null));\n    setVocabMap(newVocabMap);\n\n    getWords(options);\n\n    setBuilderState(BuilderState.PREPARING);\n  };\n\n  const reset = () => {\n    setItems(defaultItems);\n    setBuilderState(BuilderState.INPUTTING);\n  };\n\n  const onChangeNativeLanguage = (value: string) => {\n    const languageCode = value as LanguageCodes;\n    setNativeLanguage(languageCode);\n  };\n\n  const onChangeTargetLanguage = (value: string) => {\n    const languageCode = value as LanguageCodes;\n    setTargetLanguage(languageCode);\n  };\n\n  useEffect(() => {\n    // const socket = socketIOClient();\n\n    // setSocket(socket);\n\n    // return () => {\n    //   socket.close();\n    // };\n  }, []);\n\n  const isInputting = builderState === BuilderState.INPUTTING;\n  const isPreparing = builderState === BuilderState.PREPARING;\n  const isFailed = builderState === BuilderState.FAILED;\n\n  return (\n    <div className=\"sentence-finder container\">\n      <div>\n        <h2>Sentence Finder 🌍</h2>\n      </div>\n      {isInputting && (\n        <>\n          <div className=\"mb-10 text-light-color text-light\">\n            Automatic sentence cards for language learners\n          </div>\n          {/* <div className=\"mv-5 text-small\">1. Choose your language</div>\n          <div className=\"mv-5 text-small\">1. Choose your words</div>\n          <div className=\"mt-5 mb-20 text-small\">\n            3. Click 'Find Sentences' and we'll find translations and sentences\n            for you\n          </div> */}\n\n          <div className=\"sentence-finder__form\">\n            <div className=\"sentence-finder__form__language-selection\">\n              <div>Native Language</div>\n              <SelectionList\n                options={languageOptionsArray}\n                onChange={onChangeNativeLanguage}\n                initialValue={nativeLanguage}\n              />\n            </div>\n            <div className=\"sentence-finder__form__language-selection\">\n              <div>Target Language</div>\n              <SelectionList\n                options={languageOptionsArray}\n                defaultText=\"e.g. Reptiles\"\n                onChange={onChangeTargetLanguage}\n                initialValue={targetLanguage}\n              />\n            </div>\n            <div className=\"sentence-finder__form__submission mv-20\">\n              <div className=\"mr-10\">\n                {`Enter ${languageOptions[targetLanguage]} words below and then click 'Find Sentences'`}\n              </div>\n              <Button onClick={handleSubmit}>Find Sentences</Button>\n            </div>\n            <div className=\"sentence-finder__form__input\">\n              <ChipsInput items={items} setItems={setItems} />\n            </div>\n          </div>\n        </>\n      )}\n      {isPreparing && (\n        <div>\n          <WordsExport\n            vocabItems={vocabMap}\n            sourceLang={targetLanguage}\n            translationLang={nativeLanguage}\n          />\n        </div>\n      )}\n\n      {isFailed && (\n        <div className=\"mv-20\">\n          <div className=\"mb-20\">Failed to Find Sentences</div>\n          <Button onClick={reset}>Try again</Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Builder;\n","import React from 'react';\n\nconst EMAIL_SUBJECT = encodeURI('1 Click Quiz - Error');\n\ntype PropTypes = any;\n\ntype State = {\n  hasError?: boolean;\n};\n\nclass ErrorBoundary extends React.Component<PropTypes, State> {\n  constructor(props: PropTypes) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(erro: any) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    // You can also log the error to an error reporting service\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <div className=\"error-boundary container text-center\">\n          <h1>Something went wrong.</h1>\n          <div className=\"mv-50\">\n            Please&nbsp;\n            <a\n              className=\"text-light-color\"\n              href={`mailto:jonnyk_78@hotmail.com?subject=${EMAIL_SUBJECT}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              email me for help\n            </a>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport ReactGA from 'react-ga';\nimport SentenceFinder from './pages/SentenceFinder';\nimport ErrorBoundary from './components/ErrorBoundary';\n\nReactGA.initialize('UA-33174971-5');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nexport const TEST_ID = 'app';\n\nconst App = () => (\n  <Router>\n    <div className=\"app\" data-testid={TEST_ID}>\n      <ErrorBoundary>\n        <div className=\"appp__bg-overlay\"></div>\n        <Switch>\n          <Route path=\"/\">\n          <SentenceFinder />\n          </Route>\n        </Switch>\n      </ErrorBoundary>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./utils/utils.scss\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}